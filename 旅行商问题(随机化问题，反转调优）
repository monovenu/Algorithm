/**
 * @param n: an integer,denote the number of cities
 * @param roads: a list of three-tuples,denote the road between cities
 * @return: return the minimum cost to travel all cities
 * 随机化算法
 */
const minCost = function (n, roads) {
    if (n <= 0 || roads == null || roads.length == 0) {
        return 0;
    }
    
    var graph = buildGraph(n, roads);
    
    var randomTimes = 10000;
    var minCost = Number.MAX_VALUE;
    for (var i = 0; i < randomTimes; i++) {
        var path = getRandomPath(n);
        var cost = adjustPath(path, graph);
        // console.log(cost)
        minCost = Math.min(minCost, cost);
    }
    
    return minCost;
}

// 一直反转直到没有更好 
function adjustPath(path, graph) {
    var adjusted = true;
    while (adjusted) {
        adjusted = false;
        for (var i = 1; i < path.length; i++) {
            for (var j = i + 1; j < path.length; j++) {
                if (canReverse(path, i , j, graph)) {
                    reverse(i, j, path);
                    adjusted = true;
                }
            }
        }
    }
    
    var cost = 0;
    for (var i = 0; i < path.length - 1; i++) {
        cost += graph[path[i]][path[i + 1]];
    }
    
    return cost;
}

function canReverse(path, i , j, graph) {
    var before = adjustCost(path, i - 1, path[i], graph) + adjustCost(path, j + 1, path[j], graph);
    var after = adjustCost(path, i - 1, path[j], graph) + adjustCost(path, j + 1, path[i], graph);

    return before > after;
}

function reverse(i, j, path) {
    var left  = i;
    var right = j;
    while (i < j) {
        swap(i, j, path);
        i++;
        j--;
    }
}

// i计算位置， city 现在值   1-2-3  i = 1, city =2
// city可能是最后一个， i + 1处没有值
function adjustCost(path, i, city, graph) {
    var cost = 0;
    if (i + 1 < path.length) {
        cost += graph[city][path[i]];
    }
    return cost;
}

function swap(i, j, path) {
    var temp = path[j];
    path[j] = path[i];
    path[i] = temp;
}

function getRandomPath(n) {
    var path = [];
    for (var i = 0; i < n; i++) {
        path[i] = i + 1;
    }
    // 1 固定， 2没得换
    for (i = 2; i < n; i++) {
        // 取上界
        var j = Math.ceil(Math.random() * (i - 1 + 1));
        swap(i, j, path);
    }
    
    return path;
}

// 此题需要建完整图
function buildGraph(n, roads) {
    var graph = {};
    for (var i = 1; i <= n; i++) {
        graph[i] = {};
        for (var j = 1; j <= n; j++) {
            graph[i][j] = Number.MAX_VALUE; // 初始化所有值
        }
    }
    // { '1': { '2': 1, '3': 3 },
    //   '2': { '1': 1, '3': 2 },
    //   '3': { '1': 3, '2': 2 } }  
    for (i = 0; i < roads.length; i++) {
        if (roads[i][2] >= graph[roads[i][0]][roads[i][1]]) {
            continue;
        }
        graph[roads[i][0]][roads[i][1]] = roads[i][2];
        graph[roads[i][1]][roads[i][0]] = roads[i][2];
    }
    
    return graph;
}
